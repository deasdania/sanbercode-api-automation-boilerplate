{
	"info": {
		"_postman_id": "ced3aaf7-cb35-4c0c-bd86-609f8285f3ee",
		"name": "API Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42937349"
	},
	"item": [
		{
			"name": "API Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Verify access token is not null\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.accessToken).to.not.be.null;",
							"    pm.expect(jsonData.accessToken).to.not.be.undefined;",
							"    ",
							"    // Set token as environment variable for other requests",
							"    pm.environment.set(\"token\", jsonData.accessToken);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomAlphabet(length) {",
							"    const alphabet = 'abcdefghijklmnopqrstuvwxyz';",
							"    let result = '';",
							"    for (let i = 0; i < length; i++) {",
							"        result += alphabet.charAt(Math.floor(Math.random() * alphabet.length));",
							"    }",
							"    return result;",
							"}",
							"",
							"// Function untuk generate random numbers",
							"function generateRandomNumbers(length) {",
							"    let result = '';",
							"    for (let i = 0; i < length; i++) {",
							"        result += Math.floor(Math.random() * 10).toString();",
							"    }",
							"    return result;",
							"}",
							"",
							"// Get original values from environment variables",
							"const originalName = pm.environment.get(\"name\") || \"deadania\";",
							"const originalEmail = pm.environment.get(\"email\") || \"dea.dania.business@gmail.com\";",
							"",
							"// Generate random additions",
							"const randomAlphabet = generateRandomAlphabet(2); // 2 random alphabet chars",
							"const randomNumbers = generateRandomNumbers(3);   // 3 random digit numbers",
							"",
							"// Modify name: add 2 random alphabet characters after original name",
							"const modifiedName = originalName + randomAlphabet;",
							"",
							"// Modify email: add 3 random numbers before '@'",
							"const emailParts = originalEmail.split('@');",
							"const modifiedEmail = emailParts[0] + randomNumbers + '@' + emailParts[1];",
							"",
							"// Set modified values to environment variables",
							"pm.environment.set(\"name\", modifiedName);",
							"pm.environment.set(\"email\", modifiedEmail);",
							"",
							"// Log the changes for debugging",
							"console.log(\"=== PRE-REQUEST SCRIPT EXECUTION ===\");",
							"console.log(\"Original Name: \" + originalName);",
							"console.log(\"Modified Name: \" + modifiedName);",
							"console.log(\"Random Alphabet Added: \" + randomAlphabet);",
							"console.log(\"\");",
							"console.log(\"Original Email: \" + originalEmail);",
							"console.log(\"Modified Email: \" + modifiedEmail);",
							"console.log(\"Random Numbers Added: \" + randomNumbers);",
							"console.log(\"=====================================\");",
							"",
							"// Optional: Store original values for potential restoration later",
							"pm.environment.set(\"original_name\", originalName);",
							"pm.environment.set(\"original_email\", originalEmail);",
							"pm.environment.set(\"random_suffix\", randomAlphabet);",
							"pm.environment.set(\"random_numbers\", randomNumbers);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"clientName\": \"{{name}}\",\n   \"clientEmail\": \"{{email}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/api-clients/",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Response message status = OK\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"OK\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/status",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify all values in the response message are correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.test(\"Id = 1\", function () {",
							"        pm.expect(jsonData.id).to.eql(1);",
							"    });",
							"    ",
							"    pm.test(\"Name = The Russian\", function () {",
							"        pm.expect(jsonData.name).to.eql(\"The Russian\");",
							"    });",
							"    ",
							"    pm.test(\"Author = James Patterson and James 0. Born\", function () {",
							"        pm.expect(jsonData.author).to.eql(\"James Patterson and James O. Born\");",
							"    });",
							"    ",
							"    pm.test(\"ISBN = 1780899475\", function () {",
							"        pm.expect(jsonData.isbn).to.eql(\"1780899475\");",
							"    });",
							"    ",
							"    pm.test(\"Type = Fiction\", function () {",
							"        pm.expect(jsonData.type).to.eql(\"fiction\");",
							"    });",
							"    ",
							"    pm.test(\"Price = 12.98\", function () {",
							"        pm.expect(jsonData.price).to.eql(12.98);",
							"    });",
							"    ",
							"    pm.test(\"Current Stock = 12\", function () {",
							"        pm.expect(jsonData['current-stock']).to.eql(12);",
							"    });",
							"    ",
							"    pm.test(\"Available = true\", function () {",
							"        pm.expect(jsonData.available).to.eql(true);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/books/1",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code !== 201) {",
							"    console.error(\"❌ FAILED - Status:\", pm.response.code);",
							"    try {",
							"        var error = pm.response.json();",
							"        console.error(\"Error:\", error.error || \"Unknown error\");",
							"    } catch (e) {",
							"        console.error(\"Response:\", pm.response.text());",
							"    }",
							"}",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Verify the 'created' value in the response message = true\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.created).to.eql(true);",
							"});",
							"",
							"pm.test(\"Verify the 'orderId' value in the response message is not null\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.orderId).to.not.be.null;",
							"    pm.expect(jsonData.orderId).to.not.be.undefined;",
							"    ",
							"    // Set orderId as environment variable for other requests",
							"    pm.environment.set(\"orderID\", jsonData.orderId);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"Nini\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code !== 201) {",
							"    console.error(\"❌ FAILED - Status:\", pm.response.code);",
							"    try {",
							"        var error = pm.response.json();",
							"        console.error(\"Error:\", error.error || \"Unknown error\");",
							"    } catch (e) {",
							"        console.error(\"Response:\", pm.response.text());",
							"    }",
							"}",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 10000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);",
							"});",
							"",
							"pm.test(\"Verify all values in the response message are correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.test(\"Id matches value from submit order response\", function () {",
							"        var expectedOrderId = pm.environment.get(\"orderID\");",
							"        pm.expect(jsonData.id).to.eql(expectedOrderId);",
							"    });",
							"    ",
							"    pm.test(\"Book Id matches value from submit order request\", function () {",
							"        // Assuming bookId = 1 from the submit order request body",
							"        pm.expect(jsonData.bookId).to.eql(1);",
							"    });",
							"    ",
							"    pm.test(\"Customer name matches value from submit order request\", function () {",
							"        // Assuming customerName = \"Nini\" from the submit order request body",
							"        pm.expect(jsonData.customerName).to.eql(\"Nini\");",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"🔍 Single Order Request Validation...\");",
							"",
							"// Check authorization token",
							"const token = pm.environment.get(\"token\");",
							"if (!token || token.trim() === \"\") {",
							"    console.error(\"❌ Missing Authorization Token\");",
							"    console.log(\"💡 Run 'API Authentication' request first\");",
							"    throw new Error(\"Authorization token required for Single Order request\");",
							"}",
							"",
							"// Check order ID from environment or URL",
							"let orderID = pm.environment.get(\"orderID\");",
							"const url = pm.request.url.toString();",
							"",
							"// Extract orderID from URL if not in environment",
							"if (!orderID) {",
							"    const match = url.match(/\\/orders\\/([^/?]+)/);",
							"    if (match && match[1] && match[1] !== \"{{orderID}}\") {",
							"        orderID = match[1];",
							"        console.log(\"🆔 Order ID extracted from URL:\", orderID);",
							"    }",
							"}",
							"",
							"if (!orderID || orderID.trim() === \"\" || orderID === \"{{orderID}}\") {",
							"    console.error(\"❌ Missing Order ID\");",
							"    console.log(\"🔗 Current URL:\", url);",
							"    console.log(\"🔑 Environment orderID:\", pm.environment.get(\"orderID\") || \"NOT SET\");",
							"    console.log(\"💡 Run 'Submit Order' request first to get orderID\");",
							"    throw new Error(\"Order ID required for Single Order request\");",
							"}",
							"",
							"// Update URL if using placeholder",
							"if (url.includes(\"{{orderID}}\")) {",
							"    const newUrl = url.replace(\"{{orderID}}\", orderID);",
							"    pm.request.url = newUrl;",
							"    console.log(\"🔧 URL updated with orderID\");",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/{{orderID}}",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"{{orderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code !== 201) {",
							"    console.error(\"❌ FAILED - Status:\", pm.response.code);",
							"    try {",
							"        var error = pm.response.json();",
							"        console.error(\"Error:\", error.error || \"Unknown error\");",
							"    } catch (e) {",
							"        console.error(\"Response:\", pm.response.text());",
							"    }",
							"}",
							"",
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/{{orderID}}",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"{{orderID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": "deadania",
			"type": "string"
		},
		{
			"key": "email",
			"value": "dea.dania.business@gmail.com",
			"type": "string"
		},
		{
			"key": "baseURL",
			"value": "https://simple-books-api.glitch.me/",
			"type": "string"
		},
		{
			"key": "token",
			"value": "7a4f6505f86caa60c5006eecfdee2077180364f7f443d1dbecb9a216ba979feb",
			"type": "string"
		},
		{
			"key": "orderID",
			"value": "aPOidFgJdmz9vNVDM55s8",
			"type": "string"
		}
	]
}